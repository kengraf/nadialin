AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template to deploy a Python Lambda function with API Gateway v2 and DynamoDB."

Parameters:
  DEPLOYNAME:
    Description: "Prefix name for created resources"
    Type: String
  S3BUCKET:
    Description: "S3 bucket name containing Lambda function code"
    Type: String
  ROLEARN:
    Description: "Role ALL/ANY lambda functions take. This is overprovisioned"
    Type: String
    
Resources:
                     
  BackupEventFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${DEPLOYNAME}-backupEvent"
      Handler: "backupEvent.lambda_handler"
      Runtime: "python3.13"
      Role: !GetAtt ROLEARN.Arn
      Code:
        S3Bucket: !Ref S3BUCKET
        S3Key: !Sub "backupEvent.zip"
      MemorySize: 128
      
  DatabaseItemsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${DEPLOYNAME}-databaseItems"
      Handler: "databaseItems.lambda_handler"
      Runtime: "python3.13"
      Role: !GetAtt ROLEARN.Arn
      Code:
        S3Bucket: !Ref S3BUCKET
        S3Key: !Sub "databaseItems.zip"
      MemorySize: 128

  DoServiceCheckFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${DEPLOYNAME}-doServiceCheck"
      Handler: "doServiceCheckEvent.lambda_handler"
      Runtime: "python3.13"
      Role: !GetAtt ROLEARN.Arn
      Code:
        S3Bucket: !Ref S3BUCKET
        S3Key: !Sub "doServiceCheck.zip"
      MemorySize: 128

  EndScoringFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${DEPLOYNAME}-endScoring"
      Handler: "endScoring.lambda_handler"
      Runtime: "python3.13"
      Role: !GetAtt ROLEARN.Arn
      Code:
        S3Bucket: !Ref S3BUCKET
        S3Key: !Sub "endScoring.zip"
      MemorySize: 128

  EventScoresFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${DEPLOYNAME}-eventScores"
      Handler: "eventScores.lambda_handler"
      Runtime: "python3.13"
      Role: !GetAtt ROLEARN.Arn
      Code:
        S3Bucket: !Ref S3BUCKET
        S3Key: !Sub "eventScores.zip"
      MemorySize: 128

  InstanceStateFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${DEPLOYNAME}-instanceState"
      Handler: "instanceState.lambda_handler"
      Runtime: "python3.13"
      Role: !GetAtt ROLEARN.Arn
      Code:
        S3Bucket: !Ref S3BUCKET
        S3Key: !Sub "instanceState.zip"
      MemorySize: 128

  ManageInstanceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${DEPLOYNAME}-manageInstance"
      Handler: "manageInstance.lambda_handler"
      Runtime: "python3.13"
      Role: !GetAtt ROLEARN.Arn
      Code:
        S3Bucket: !Ref S3BUCKET
        S3Key: !Sub "manageInstance.zip"
      MemorySize: 128

  RestoreEventFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${DEPLOYNAME}-restoreEvent"
      Handler: "restoreEvent.lambda_handler"
      Runtime: "python3.13"
      Role: !GetAtt ROLEARN.Arn
      Code:
        S3Bucket: !Ref S3BUCKET
        S3Key: !Sub "restoreEvent.zip"
      MemorySize: 128

  RunInstancesFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${DEPLOYNAME}-runInstances"
      Handler: "runInstances.lambda_handler"
      Runtime: "python3.13"
      Role: !GetAtt ROLEARN.Arn
      Code:
        S3Bucket: !Ref S3BUCKET
        S3Key: !Sub "runInstances.zip"
      MemorySize: 128

  SetupScoringFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${DEPLOYNAME}-setupScoring"
      Handler: "setupScoring.lambda_handler"
      Runtime: "python3.13"
      Role: !GetAtt ROLEARN.Arn
      Code:
        S3Bucket: !Ref S3BUCKET
        S3Key: !Sub "setupScoring.zip"
      MemorySize: 128

  StartScoringFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${DEPLOYNAME}-startScoring"
      Handler: "startScoring.lambda_handler"
      Runtime: "python3.13"
      Role: !GetAtt ROLEARN.Arn
      Code:
        S3Bucket: !Ref S3BUCKET
        S3Key: !Sub "startScoring.zip"
      MemorySize: 128

  VerifyTokenFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${DEPLOYNAME}-verifyToken"
      Handler: "verifyToken.handler"
      Runtime: "python3.13"
      Role: !GetAtt ROLEARN.Arn
      Code:
        S3Bucket: !Ref S3BUCKET
        S3Key: !Sub "verifyToken.zip"
      MemorySize: 128
      Environment:
        Variables:
          TABLE_NAME: !Ref TableHackers


  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Body:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: !Sub "s3://${S3BUCKET}/apigatewayv2.yaml"
    DependsOn:
      - VerifyTokenFunction
      - DatabaseItemsFunction
      
  BackupEventInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BackupEventFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*"
      
  DatabaseItemsInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DatabaseItemsFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*"
      
  DoServiceCheckInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DoServiceCheckFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*"
      
  EndScoringInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EndScoringFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*"
      
  EventScoresInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EventScoresFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*"
      
  InstanceStateInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref InstanceStateFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*"
      
  ManageInstanceInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ManageInstanceFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*"

  RestoreEventInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RestoreEventFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*"
      
  RunInstancesInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RunInstancesFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*"
      
  SetupScoringPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SetupScoringFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*"
      
  StartScoringInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref StartScoringFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*"
      
  VerifyTokenInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref VerifyTokenFunction
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*"
      

  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      AutoDeploy: true
      StageName: "v1"
      Description: "Production stage"
      AccessLogSettings:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: >-
          {"requestId":"$context.requestId","ip":"$context.identity.sourceIp",
          "requestTime":"$context.requestTime","httpMethod":"$context.httpMethod",
          "routeKey":"$context.routeKey","status":"$context.status",
          "protocol":"$context.protocol","responseLength":"$context.responseLength"}

  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/api-gateway/${HttpApi}"
      RetentionInDays: 7

  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ApiGatewayLambdaIntegrationRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:GetFunction
                  - lambda:GetFunctionConfiguration
                  - lambda:ListFunctions
                Resource: "arn:aws:lambda:*:*:function:*"

  VerifyTokenIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: 2.0
      IntegrationUri: 
        Fn::Sub: "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:nadialin-verifyToken"
      CredentialsArn: !GetAtt ApiGatewayRole.Arn

  ROLEARN:
    Type: AWS::IAM::Role
    Properties:
      RoleName: nadialin-ROLEARN
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole

  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      Name: nadialin-instanceState
      EventBusName: default
      Targets:
        - Id: "1"
          Arn: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:nadialin-instanceState
          RoleArn: !GetAtt ROLEARN.Arn  
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EC2 Instance State-change Notification
        detail:
          state:
            - pending
            - running
            - stopping
            - stopped
            - shutting-down
            - terminated
      RoleArn: !GetAtt ROLEARN.Arn
 
Outputs:
  ApiEndpoint:
    Value: !GetAtt HttpApi.ApiEndpoint
    Export:
      Name: !Sub "${DEPLOYNAME}-ApiEndpoint"

  ApiGatewayInvokeUrl:
    Description: "Invoke URL for the API Gateway stage"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/v1"
    Export:
      Name: !Sub "${DEPLOYNAME}-Gateway-URL"
