openapi: 3.0.1
info:
  title: nadialin
  description: Cybersecurity "King of the hill" game.
  version: 1.0.19
servers:
- url: /
security:
- CookieAuth: []
paths:
  /verifyToken:
    post:
      summary: Authenticate the user and issue a session cookie
      operationId: userLogin
      requestBody:
        description: Login credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login_body'
        required: true
      responses:
        "200":
          description: "Login successful, session cookie set"
          headers:
            Set-Cookie:
              description: Session cookie
              style: simple
              explode: false
              schema:
                type: string
                example: session_id=abc123; HttpOnly; Secure; Path=/; Max-Age=3600
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-verifyToken/invocations"
        connectionType: "INTERNET"
  /squad:
    put:
      tags:
      - squad
      summary: Add/update squad information (members)
      operationId: putSquad
      requestBody:
        description: TBD *Markdown*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Squad'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Squad'
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /squad/{name}:
    get:
      tags:
      - squad
      summary: Retrieve squad members
      operationId: getSquad
      parameters:
      - name: name
        in: path
        description: Name of hacker to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Squad'
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
    delete:
      tags:
      - squad
      summary: Remove squad from event
      operationId: deleteSquad
      parameters:
      - name: name
        in: path
        description: Name of squad to remove
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Squad'
      security:
      - CookieAuth: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /squads:
    get:
      tags:
      - squad
      summary: Retrieve all squads
      operationId: getSquads
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /hacker:
    put:
      tags:
      - hacker
      summary: Add/update hacker information
      operationId: putHacker
      requestBody:
        description: TBD *Markdown*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hacker'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hacker'
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /hacker/{name}:
    get:
      tags:
      - hacker
      summary: Retrieve hacker information
      operationId: getHacker
      parameters:
      - name: name
        in: path
        description: Name of hacker to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hacker'
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
    delete:
      tags:
      - hacker
      summary: Remove hacker from event
      operationId: deleteHacker
      parameters:
      - name: name
        in: path
        description: Name of hacker to remove
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hacker'
      security:
      - CookieAuth: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /hackers:
    get:
      tags:
      - hacker
      summary: Retrieve all hackers
      operationId: getHackers
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /event:
    put:
      tags:
      - event
      summary: Add/update event information
      operationId: putEvent
      requestBody:
        description: TBD *Markdown*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /event/{name}:
    get:
      tags:
      - event
      summary: Retrieve event information
      operationId: getEvent
      parameters:
      - name: name
        in: path
        description: Name of event to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
    delete:
      tags:
      - event
      summary: "Remove event from event, is this real?"
      operationId: deleteEvent
      parameters:
      - name: name
        in: path
        description: Name of event to remove
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      security:
      - CookieAuth: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /events:
    get:
      tags:
      - event
      summary: Retrieve all events
      operationId: getEvents
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /eventScores:
    get:
      tags:
      - event
      summary: Retrieve scores for all squads
      operationId: eventScores
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-eventScores/invocations"
        connectionType: "INTERNET"
  /backupEvent:
    get:
      tags:
      - event
      summary: "Retrieve all event data, minus service checks"
      operationId: backupEvent
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-backupEvent/invocations"
        connectionType: "INTERNET"
  /restoreEvent:
    put:
      tags:
      - event
      summary: "Load previous event data, no service checks"
      operationId: restoreEvent
      requestBody:
        description: TBD *Markdown*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-restoreEvent/invocations"
        connectionType: "INTERNET"
  /machine:
    put:
      tags:
      - machine
      summary: Add/update machine information
      operationId: putMachine
      requestBody:
        description: TBD *Markdown*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Machine'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /machine/{name}:
    get:
      tags:
      - machine
      summary: Retrieve machine information
      operationId: getMachine
      parameters:
      - name: name
        in: path
        description: Name of machine to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
    delete:
      tags:
      - machine
      summary: Remove machine from event
      operationId: deleteMachine
      parameters:
      - name: name
        in: path
        description: Name of machine to remove
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'
      security:
      - CookieAuth: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /machines:
    get:
      tags:
      - machine
      summary: Retrieve all machines
      operationId: getMachines
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "GET"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /instance:
    put:
      tags:
      - instance
      summary: Add/update instance information
      operationId: putInstance
      requestBody:
        description: TBD *Markdown*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Instance'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /instance/{name}:
    get:
      tags:
      - instance
      summary: Retrieve instance information
      operationId: getInstance
      parameters:
      - name: name
        in: path
        description: Name of instance to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
    delete:
      tags:
      - instance
      summary: Remove instance from event
      operationId: deleteInstance
      parameters:
      - name: name
        in: path
        description: Name of instance to remove
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
      security:
      - CookieAuth: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /instances:
    get:
      tags:
      - instance
      summary: Retrieve all instances
      operationId: getInstances
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /runInstances:
    put:
      tags:
      - instance
      summary: Launch one instance per squad
      operationId: runInstances
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-runInstances/invocations"
        connectionType: "INTERNET"
  /terminateInstances:
    put:
      tags:
      - instance
      summary: "Terminate all instances, post event action"
      operationId: terminateInstances
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-terminateInstances/invocations"
        connectionType: "INTERNET"
  /restartInstance/{name}:
    put:
      tags:
      - instance
      summary: Restart (terminate followed by run)
      operationId: restartInstances
      parameters:
      - name: name
        in: path
        description: Name of instance to restart
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-restartInstance/invocations"
        connectionType: "INTERNET"
  /currentState/{name}:
    get:
      tags:
      - instance
      summary: "Retrieve running, booting, stop state instances"
      operationId: currentState
      parameters:
      - name: name
        in: path
        description: Name of instance to retrieve state
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /service:
    put:
      tags:
      - service
      summary: Add/update service information
      operationId: putService
      requestBody:
        description: TBD *Markdown*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /service/{name}:
    get:
      tags:
      - service
      summary: Retrieve service information
      operationId: getService
      parameters:
      - name: name
        in: path
        description: Name of service to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
    delete:
      tags:
      - service
      summary: Remove service from event
      operationId: deleteService
      parameters:
      - name: name
        in: path
        description: Name of service to remove
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      security:
      - CookieAuth: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /services:
    get:
      tags:
      - service
      summary: Retrieve all Services
      operationId: getServices
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /serviceCheck:
    put:
      tags:
      - serviceCheck
      summary: Add/update service check information
      operationId: putServiceCheck
      requestBody:
        description: TBD *Markdown*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceCheck'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceCheck'
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /serviceCheck/{name}:
    get:
      tags:
      - serviceCheck
      summary: Retrieve service check information
      operationId: getServiceCheck
      parameters:
      - name: name
        in: path
        description: Name of serviceCheck to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceCheck'
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
    delete:
      tags:
      - service
      summary: Remove service check from event
      operationId: deleteServiceCheck
      parameters:
      - name: name
        in: path
        description: Name of service check to remove
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceCheck'
      security:
      - CookieAuth: []
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
  /serviceChecks:
    get:
      tags:
      - service
      summary: Retrieve all Services
      operationId: getServiceChecks
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::788715698479:role/nadialin-LambdaIntegrationRole"
        payloadFormatVersion: "2.0"
        type: "aws_proxy"
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-2:788715698479:function:nadialin-databaseItems/invocations"
        connectionType: "INTERNET"
components:
  schemas:
    Squad:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: This is the flag value to show machine ownership
          example: WoobaGoobas
        score:
          type: integer
          description: Current numerof points scored
      xml:
        name: category
    Hacker:
      required:
      - email
      type: object
      properties:
        uuid:
          type: string
          description: Session cookie genrated on login
          format: uuid4
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
        name:
          type: string
          description: user protion of email
          example: wooba
        email:
          type: string
          description: Google email provided at login
          format: email
          example: wooba@goobas.com
        active:
          type: boolean
          description: VPN login Login status
        admin:
          type: boolean
          description: True if allowed to manage the event
        oidcToken:
          type: string
          description: token provided at login
        squad:
          type: string
          description: Name of this hacker's squad
          example: WoobaGoobas
      xml:
        name: hacker
    Machine:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: unique and informative prefix. Often the name of the event
        templateName:
          type: string
          description: Name of AWS launch template
        authorNotes:
          type: string
          description: guidence provided by the machine author
        services:
          type: array
          description: Services this machine will check
          items:
            $ref: '#/components/schemas/Service'
      xml:
        name: machine
    Service:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: Unique for machine. Descriptive of service
          example: httpHomePageGet
        protocol:
          type: string
          description: Protocol offered by machine
          example: HTTPS or SSH
          enum:
          - get_flag
          - ssh
          - scp
          - http
          - https
          - rdp
        url:
          type: string
          description: Template for the check request.  Values are replaced during the machine creation process and are specific to the type of check being executed
          example: "http://{ip}:49855/{squad}/flag.txt"
        expected_return:
          type: string
          description: Value the machine should return for a successful check
          example: httpHomePageGet
        points:
          type: integer
          description: Points awarded on successful checks.  Liveness checks are normally 0
      xml:
        name: service
    ServiceCheck:
      required:
      - id
      type: object
      properties:
        id:
          type: string
          description: UUID primary key
        machine:
          type: string
          description: Name of machine that was checked
        squad:
          type: string
          description: Name of squad for this check
        action:
          type: string
          description: Type of service that was checked
        timestamp:
          type: string
          description: When the service check completed
          format: date-time
        actual:
          type: string
          description: What the check actually returned
        passedt:
          type: boolean
          description: Simple success/failure
      xml:
        name: serviceCheck
    Instance:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          description: "Concatination of machine and squad names. Each squad gets their own instance of the machine, and only the squad is allowed to request a reboot"
          example: machine-squad
        instanceId:
          type: string
          description: EC2 instance id
        owner:
          type: string
          description: Flag of current squad
          example: WoobaGoobas
        ipv4:
          type: string
          description: IPv4 address of machine
          format: ipv6
          example: 10.66.2.2
        dns:
          type: string
          description: DNS name of machine
          format: dns
          example: squad.machine.test.com
        status:
          type: string
          description: machine status in the event
          enum:
          - booting
          - running
          - down
      xml:
        name: machine
    Event:
      required:
      - name
      type: object
      properties:
        name:
          type: string
          example: WoobaGooba's King of the Hill event
        admin:
          type: string
          description: "The name of person creating and managing the event, may or may not be playing"
          example: wooba
        startTime:
          type: string
          description: "Start time of event, when access to instances is allowed"
          format: data-time
          example: 2017-07-21T17:32:28Z
        endTime:
          type: string
          description: When the scoring and access stops
          format: data-time
          example: 2017-07-21T17:32:28Z
        homePage:
          type: string
          description: Event dashboard
          format: uri
          example: https://woobagoobas.test.com
        squadize:
          type: integer
          description: Maximum number of hackers allowed on a squad (can be 1)
      xml:
        name: event
    login_body:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    inline_response_200:
      type: object
      properties:
        message:
          type: string
          example: Login successful
    inline_response_200_1:
      type: object
      properties:
        message:
          type: string
          example: Secure data accessed
    inline_response_401:
      type: object
      properties:
        error:
          type: string
          example: Unauthorized
  requestBodies:
    Machine:
      description: Machine object that needs to be added to the event
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Machine'
        application/xml:
          schema:
            $ref: '#/components/schemas/Machine'
    ServiceArray:
      description: List of hacker object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Service'
  securitySchemes:
    CookieAuth:
      type: apiKey
      name: session_id
      in: cookie
x-amazon-apigateway-importexport-version: "1.0"
