openapi: 3.0.1
info:
  title: Nadialin
  description: Game.
  version: 1.0.19
servers:
- url: /
security:
- CookieAuth: []
paths:
  /login:
    post:
      summary: Authenticate the user and issue a session cookie
      operationId: userLogin
      requestBody:
        description: Login credentials
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login_body'
        required: true
      responses:
        "200":
          description: "Login successful, session cookie set"
          headers:
            Set-Cookie:
              description: Session cookie
              style: simple
              explode: false
              schema:
                type: string
                example: session_id=abc123; HttpOnly; Secure; Path=/; Max-Age=3600
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: POST
        uri: "arn:aws:lambda:{region}:{account_id}:function:nadialinVerifyToken"
  /hacker:
    put:
      tags:
      - hacker
      summary: Add/update hacker information
      operationId: putHacker
      requestBody:
        description: TBD *Markdown*
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hacker'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hacker'
  /hacker/{name}:
    get:
      tags:
      - hacker
      summary: Retrieve hacker information
      operationId: getHacker
      parameters:
      - name: name
        in: path
        description: Name of hacker to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hacker'
    delete:
      tags:
      - hacker
      summary: Remove hacker from event
      operationId: deleteHacker
      parameters:
      - name: name
        in: path
        description: Name of hacker to remove
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hacker'
      security:
      - CookieAuth: []
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: GET
        uri: "arn:aws:lambda:{region}:{account_id}:function:SecureEndpointFunction/invocations"
  /secure-endpoint:
    get:
      summary: Access a secure endpoint (requires authentication)
      operationId: secureEndpoint
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "401":
          description: Unauthorized (invalid or missing session cookie)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_401'
      security:
      - CookieAuth: []
      x-amazon-apigateway-integration:
        payloadFormatVersion: "2.0"
        type: aws_proxy
        httpMethod: GET
        uri: "arn:aws:lambda:{region}:{account_id}:function:SecureEndpointFunction/invocations"
components:
  schemas:
    Squad:
      type: object
      properties:
        name:
          type: string
          description: This is the flag value to show machine ownership
          example: WoobaGoobas
        score:
          type: integer
          description: Current numerof points scored
      xml:
        name: category
    Hacker:
      type: object
      properties:
        id:
          type: string
          format: uuid4
          example: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
        name:
          type: string
          example: Bob
        email:
          type: string
          format: email
          example: bob@email.com
        active:
          type: boolean
          description: Login status
        admin:
          type: boolean
          description: True if allowed to manage the event
        squadId:
          type: string
          example: WoobaGoobas
      xml:
        name: hacker
    Machine:
      required:
      - ami
      - name
      - userData
      type: object
      properties:
        name:
          type: string
          description: a
          format: uuid4
        userData:
          type: string
          description: Base64 data needed to create a new instance
          format: base64
        ami:
          type: string
          description: Region specific AWS ami identifier
          example: ami-012345678901234567
        authorNotes:
          type: string
          description: guidence provided by the machine author
        services:
          type: array
          items:
            $ref: '#/components/schemas/Service'
      xml:
        name: machine
    Service:
      required:
      - port
      - protocol
      type: object
      properties:
        protocol:
          type: string
          description: Protocol offered by machine
          example: HTTPS or SSH
          enum:
          - SSH
          - HTTP
          - HTTPS
          - RDP
        port:
          type: integer
          description: Any valid TCP port
      xml:
        name: machine
    Instance:
      required:
      - adminSquad
      type: object
      properties:
        adminSquad:
          type: string
          description: "Original owner, only one allowed to request reboot"
          example: WoobaGoobas
        owner:
          type: string
          description: Flag of current squad
          example: WoobaGoobas
        ipv6:
          type: string
          description: IPv6 address of machine
          format: ipv6
          example: 2001:0db8:85a3:0000:0000:8a2e:0370:7334
        dns:
          type: string
          description: DNS name of machine
          format: dns
          example: woobagoobas.test.com
        status:
          type: string
          description: machine status in the event
          enum:
          - booting
          - running
          - down
      xml:
        name: machine
    Event:
      required:
      - admin
      - name
      type: object
      properties:
        name:
          type: string
          example: WoobaGooba's King of the Hill event
        admin:
          type: string
          description: "The person creating the event, may not be playing"
          format: email
          example: bob@email.com
        startTime:
          type: string
          description: "Start time of event, when access to instances is allowed"
          format: data-time
          example: 2017-07-21T17:32:28Z
        endTime:
          type: string
          description: When the scoring and access stops
          format: data-time
          example: 2017-07-21T17:32:28Z
        homePage:
          type: string
          description: Event dashboard
          format: uri
          example: https://woobagoobas.test.com
        squadSize:
          type: integer
          description: Maximum number of hackers allowed on a squad (can be 1)
      xml:
        name: machine
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    login_body:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    inline_response_200:
      type: object
      properties:
        message:
          type: string
          example: Login successful
    inline_response_200_1:
      type: object
      properties:
        message:
          type: string
          example: Secure data accessed
    inline_response_401:
      type: object
      properties:
        error:
          type: string
          example: Unauthorized
  requestBodies:
    Machine:
      description: Machine object that needs to be added to the event
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Machine'
        application/xml:
          schema:
            $ref: '#/components/schemas/Machine'
    HackerArray:
      description: List of hacker object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Hacker'
  securitySchemes:
    CookieAuth:
      type: apiKey
      name: session_id
      in: cookie
