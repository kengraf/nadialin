openapi: 3.0.2
info:
  title: Nadialin - API
  description: |-
    TBD 

    Some useful links:
    - [The repository](https://github.com/TBD)
    - [The source API definition](https://github.com/TBD.yaml)
  termsOfService: TBD
  contact:
    email: TBD@TBD.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.19
externalDocs:
  description: 'Find out more â€¦ '
  url: http://TBD.io
servers:
  - url: /api/v3
tags:
  - name: machine
    description: Everything about your Machines
    externalDocs:
      description: Find out more
      url: http://TBD.io
  - name: event
    description: Access to event configuration
    externalDocs:
      description: Find out more about our event
      url: http://TBD.io
  - name: hacker
    description: Operations about hacker
paths:
  /machine:
    put:
      tags:
        - machine
      summary: Update an existing machine
      description: Update an existing machine by Id
      operationId: updateMachine
      requestBody:
        description: Update an existent machine in the event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Machine'
          application/xml:
            schema:
              $ref: '#/components/schemas/Machine'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Machine'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Machine'
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'
        '400':
          description: Invalid ID supplied
        '404':
          description: Machine not found
        '405':
          description: Validation exception
    post:
      tags:
        - machine
      summary: Add a new machine to the event
      description: Add a new machine to the event
      operationId: addMachine
      requestBody:
        description: Create a new machine in the event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Machine'
          application/xml:
            schema:
              $ref: '#/components/schemas/Machine'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Machine'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Machine'
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'
        '405':
          description: Invalid input

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        machineId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        hackername:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    Hacker:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        hackername:
          type: string
          example: theHacker
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        hackerStatus:
          type: integer
          description: Hacker Status
          format: int32
          example: 1
      xml:
        name: hacker
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Machine:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: machine status in the event
          enum:
            - available
            - pending
            - sold
      xml:
        name: machine
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Machine:
      description: Machine object that needs to be added to the event
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Machine'
        application/xml:
          schema:
            $ref: '#/components/schemas/Machine'
    HackerArray:
      description: List of hacker object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Hacker'

