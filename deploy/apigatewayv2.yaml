openapi: 3.0.2
info:
  title: Nadialin - API
  description: "TBD \n\nSome useful links:\n- [The repository](https://github.com/TBD)\n- [The source API definition](https://github.com/TBD.yaml)"
  termsOfService: TBD
  contact:
    email: TBD@TBD.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.19
externalDocs:
  description: 'Find out more â€¦ '
  url: http://TBD.io
servers:
- url: /api/v3
tags:
- name: machine
  description: Everything about your Machines
  externalDocs:
    description: Find out more
    url: http://TBD.io
- name: event
  description: Access to event configuration
  externalDocs:
    description: Find out more about our event
    url: http://TBD.io
- name: hacker
  description: Operations about hacker
paths:
  /machine:
    put:
      tags:
      - machine
      summary: Update an existing machine
      description: Update an existing machine by Id
      operationId: updateMachine
      requestBody:
        description: Update an existent machine in the event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Machine'
          application/xml:
            schema:
              $ref: '#/components/schemas/Machine'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Machine'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Machine'
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'
        "400":
          description: Invalid ID supplied
        "404":
          description: Machine not found
        "405":
          description: Validation exception
      security:
      - nadialin_auth:
        - write:machines
        - read:machines
    post:
      tags:
      - machine
      summary: Add a new machine to the event
      description: Add a new machine to the event
      operationId: addMachine
      requestBody:
        description: Create a new machine in the event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Machine'
          application/xml:
            schema:
              $ref: '#/components/schemas/Machine'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Machine'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Machine'
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'
        "405":
          description: Invalid input
      security:
      - nadialin_auth:
        - write:machines
        - read:machines
  /machine/findByStatus:
    get:
      tags:
      - machine
      summary: Finds Machines by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findMachinesByStatus
      parameters:
      - name: status
        in: query
        description: Status values that need to be considered for filter
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: available
          enum:
          - available
          - pending
          - sold
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Machine'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Machine'
        "400":
          description: Invalid status value
      security:
      - nadialin_auth:
        - write:machines
        - read:machines
  /machine/findByTags:
    get:
      tags:
      - machine
      summary: Finds Machines by tags
      description: "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing."
      operationId: findMachinesByTags
      parameters:
      - name: tags
        in: query
        description: Tags to filter by
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Machine'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Machine'
        "400":
          description: Invalid tag value
      security:
      - nadialin_auth:
        - write:machines
        - read:machines
  /machine/{machineId}:
    get:
      tags:
      - machine
      summary: Find machine by ID
      description: Returns a single machine
      operationId: getMachineById
      parameters:
      - name: machineId
        in: path
        description: ID of machine to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Machine'
            application/json:
              schema:
                $ref: '#/components/schemas/Machine'
        "400":
          description: Invalid ID supplied
        "404":
          description: Machine not found
      security:
      - api_key: []
      - nadialin_auth:
        - write:machines
        - read:machines
    post:
      tags:
      - machine
      summary: Updates a machine in the event with form data
      description: ""
      operationId: updateMachineWithForm
      parameters:
      - name: machineId
        in: path
        description: ID of machine that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: name
        in: query
        description: Name of machine that needs to be updated
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status
        in: query
        description: Status of machine that needs to be updated
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "405":
          description: Invalid input
      security:
      - nadialin_auth:
        - write:machines
        - read:machines
    delete:
      tags:
      - machine
      summary: Deletes a machine
      description: ""
      operationId: deleteMachine
      parameters:
      - name: api_key
        in: header
        description: ""
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: machineId
        in: path
        description: Machine id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid machine value
      security:
      - nadialin_auth:
        - write:machines
        - read:machines
  /machine/{machineId}/uploadImage:
    post:
      tags:
      - machine
      summary: uploads an image
      description: ""
      operationId: uploadFile
      parameters:
      - name: machineId
        in: path
        description: ID of machine to update
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      - name: additionalMetadata
        in: query
        description: Additional Metadata
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - nadialin_auth:
        - write:machines
        - read:machines
  /event/inventory:
    get:
      tags:
      - event
      summary: Returns machine inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
      - api_key: []
  /event/order:
    post:
      tags:
      - event
      summary: Place an order for a machine
      description: Place a new order in the event
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "405":
          description: Invalid input
  /event/order/{orderId}:
    get:
      tags:
      - event
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of order that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    delete:
      tags:
      - event
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  /hacker:
    post:
      tags:
      - hacker
      summary: Create hacker
      description: This can only be done by the logged in hacker.
      operationId: createHacker
      requestBody:
        description: Created hacker object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hacker'
          application/xml:
            schema:
              $ref: '#/components/schemas/Hacker'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Hacker'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hacker'
            application/xml:
              schema:
                $ref: '#/components/schemas/Hacker'
  /hacker/createWithList:
    post:
      tags:
      - hacker
      summary: Creates list of hackers with given input array
      description: Creates list of hackers with given input array
      operationId: createHackersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Hacker'
      responses:
        "200":
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Hacker'
            application/json:
              schema:
                $ref: '#/components/schemas/Hacker'
        default:
          description: successful operation
  /hacker/login:
    get:
      tags:
      - hacker
      summary: Logs hacker into the system
      description: ""
      operationId: loginHacker
      parameters:
      - name: hackername
        in: query
        description: The hacker name for login
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the hacker
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid hackername/password supplied
  /hacker/logout:
    get:
      tags:
      - hacker
      summary: Logs out current logged in hacker session
      description: ""
      operationId: logoutHacker
      parameters: []
      responses:
        default:
          description: successful operation
  /hacker/{hackername}:
    get:
      tags:
      - hacker
      summary: Get hacker by hacker name
      description: ""
      operationId: getHackerByName
      parameters:
      - name: hackername
        in: path
        description: 'The name that needs to be fetched. Use hacker1 for testing. '
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Hacker'
            application/json:
              schema:
                $ref: '#/components/schemas/Hacker'
        "400":
          description: Invalid hackername supplied
        "404":
          description: Hacker not found
    put:
      tags:
      - hacker
      summary: Update hacker
      description: This can only be done by the logged in hacker.
      operationId: updateHacker
      parameters:
      - name: hackername
        in: path
        description: name that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Update an existent hacker in the event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hacker'
          application/xml:
            schema:
              $ref: '#/components/schemas/Hacker'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Hacker'
      responses:
        default:
          description: successful operation
    delete:
      tags:
      - hacker
      summary: Delete hacker
      description: This can only be done by the logged in hacker.
      operationId: deleteHacker
      parameters:
      - name: hackername
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid hackername supplied
        "404":
          description: Hacker not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        machineId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        hackername:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    Hacker:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        hackername:
          type: string
          example: theHacker
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        hackerStatus:
          type: integer
          description: Hacker Status
          format: int32
          example: 1
      xml:
        name: hacker
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Machine:
      required:
      - name
      - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: machine status in the event
          enum:
          - available
          - pending
          - sold
      xml:
        name: machine
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Machine:
      description: Machine object that needs to be added to the event
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Machine'
        application/xml:
          schema:
            $ref: '#/components/schemas/Machine'
    HackerArray:
      description: List of hacker object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Hacker'
  securitySchemes:
    nadialin_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://nadialin3.swagger.io/oauth/authorize
          scopes:
            write:machines: modify machines in your account
            read:machines: read your machines
    api_key:
      type: apiKey
      name: api_key
      in: header
