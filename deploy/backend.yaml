AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation template to deploy a Python Lambda function with API Gateway v2 and DynamoDB."

Parameters:
  DeployName:
    Description: "Prefix name for created resources"
    Type: String
  S3bucketName:
    Description: "S3 bucket name containing Lambda function code"
    Type: String

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: 
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${DeployName}LambdaExecution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource: "arn:aws:dynamodb:*:*:*"

  TableSquads:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:  !Sub "${DeployName}-squads"
      AttributeDefinitions:
        - AttributeName: "name"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "name"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  TableHackers:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:  !Sub "${DeployName}-hackers"
      AttributeDefinitions:
        - AttributeName: "name"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "name"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  TableMachines:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:  !Sub "${DeployName}-machines"
      AttributeDefinitions:
        - AttributeName: "name"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "name"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  TableServices:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:  !Sub "${DeployName}-services"
      AttributeDefinitions:
        - AttributeName: "name"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "name"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  TableServiceChecks:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:  !Sub "${DeployName}-serviceChecks"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "name"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        - AttributeName: "name"
          AttributeType: "RANGE"
      BillingMode: PAY_PER_REQUEST

  TableInstances:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:  !Sub "${DeployName}-instances"
      AttributeDefinitions:
        - AttributeName: "name"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "name"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  TableEvent:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:  !Sub "${DeployName}-event"
      AttributeDefinitions:
        - AttributeName: "name"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "name"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  ValidateTokenFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${DeployName}-VerifyToken"
      Handler: "verifyToken.handler"
      Runtime: "python3.13"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref S3bucketName
        S3Key: "validate-token-function.zip"
      MemorySize: 128
      Timeout: 15
      Environment:
        Variables:
          TABLE_NAME: !Ref TableHackers

  DatabaseItemsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${DeployName}-DatabaseItemsFunction"
      Handler: "verifyToken.handler"
      Runtime: "python3.13"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref S3bucketName
        S3Key: "database-items-function.zip"
      MemorySize: 128
      Timeout: 15
      Environment:
        Variables:
          TABLE_NAME: !Ref TableHackers

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Body:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: !Sub "s3://${S3bucketName}/apigatewayv2.yaml"

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: "*"
      Action: "lambda:InvokeFunction"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*"

  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      AutoDeploy: true
      StageName: "v1"
      Description: "Production stage"

Outputs:
  ApiEndpoint:
    Value: !GetAtt HttpApi.ApiEndpoint
    Export:
      Name: !Sub "${DeployName}-ApiEndpoint"

  ApiGatewayInvokeUrl:
    Description: "Invoke URL for the API Gateway stage"
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/v1"
    Export:
      Name: !Sub "${DeployName}-Gateway-URL"
