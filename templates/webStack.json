
   "AWSTemplateFormatVersion": "2010-09-09",
   "Description": "Provides networking configuration for NECCDC blue team deployment",
    "Metadata" : {
        "Stack" : {"Value" : "2"},
        "VersionDate" : { "Value" : "09302017" },
        "Identifier" : { "Value" : "stack2-network" },
        "Input" : { "Description" : "CIDR blocks, VPC names, KeyName, EC2 instance size" },
        "Output" : { "Description" : "Outputs ID of all deployed resources" }
    },
   "Parameters": {
{
    "RequestUnicornFunct": {
	"Type": "AWS::Lambda::Function",
	"Properties": {
	    "Code": "path-to-file/requestUnicorn.js",
	    "FunctionName": "requestUnicorn",
	    "Handler": "requestUnicorn.handler",
	    "MemorySize": 128,
	    "Role": "!GetAtt DynamodbRole.Arn",
	    "Runtime": "nodejs10.x"
	}
    },
    "RestApi": {
	"Type": "AWS::ApiGateway::RestApi",
	"Properties": {
	    "EndpointConfiguration": {
		"Types": [
		    "EDGE"
		]
	    },
	    "Name": "wildRydes"
	}
    },
    "CognitoAuthorizer": {
	"Type": "AWS::ApiGateway::Authorizer",
	"Properties": {
	    "IdentitySource": "method.request.header.Authorization",
	    "Name": "wildRydes",
	    "ProviderARNs": [
		"!GetAtt UserPool.Arn"
	    ],
	    "RestApiId": "!Ref RestApi",
	    "Type": "COGNITO_USER_POOLS"
	}
    },
    "ApiResource": {
	"Type": "AWS::ApiGateway::Resource",
	"Properties": {
	    "ParentId": "!GetAtt RestApi.RootResourceId",
	    "PathPart": { "Ref" : "AppName" },
	    "RestApiId": "!Ref RestApi"
	}
    },
    "ApiMethod": {
	"Type": "AWS::ApiGateway::Method",
	"Properties": {
	    "AuthorizationType": "COGNITO_USER_POOLS",
	    "AuthorizerId": "!Ref CognitoAuthorizer",
	    "HttpMethod": "POST",
	    "Integration": {
		"IntegrationHttpMethod": "POST",
		"Type": "AWS_PROXY",
		"Uri": "!Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RequestUnicornFunct.Arn}/invocations"
	    },
	    "MethodResponses": {
		"StatusCode": "200",
		"ResponseModels": {
		    "application/json": "Empty"
		},
		"ResponseParameters": {
		    "method.response.header.Access-Control-Allow-Origin": true
		}
	    },
	    "ResourceId": "!Ref ApiResource",
	    "RestApiId": "!Ref RestApi"
	}
    },
    "OptionsMethod": {
	"Type": "AWS::ApiGateway::Method",
	"Properties": {
	    "AuthorizationType": "NONE",
	    "HttpMethod": "OPTIONS",
	    "Integration": {
		"IntegrationResponses": {
		    "StatusCode": "200",
		    "ResponseParameters": {
			"method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
			"method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
			"method.response.header.Access-Control-Allow-Origin": "'*'"
		    },
		    "ResponseTemplates": {
			"application/json": ""
		    }
		},
		"PassthroughBehavior": "WHEN_NO_MATCH",
		"RequestTemplates": {
		    "application/json": "{\"statusCode\": 200}"
		},
		"Type": "MOCK"
	    },
	    "MethodResponses": {
		"StatusCode": "200",
		"ResponseModels": {
		    "application/json": "Empty"
		},
		"ResponseParameters": {
		    "method.response.header.Access-Control-Allow-Headers": false,
		    "method.response.header.Access-Control-Allow-Methods": false,
		    "method.response.header.Access-Control-Allow-Origin": false
		}
	    },
	    "ResourceId": "!Ref ApiResource",
	    "RestApiId": "!Ref RestApi"
	}
    },
    "ApiPermissions": {
	"DependsOn": "RequestUnicornFunct",
	"Type": "AWS::Lambda::Permission",
	"Properties": {
	    "Action": "lambda:InvokeFunction",
	    "FunctionName": "requestUnicorn",
	    "Principal": "apigateway.amazonaws.com",
	    "SourceArn": "!Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*/POST/ride"
	}
    },
    "ApiDeploy": {
	"DependsOn": "ApiMethod",
	"Type": "AWS::ApiGateway::Deployment",
	"Properties": {
	    "RestApiId": "!Ref RestApi",
	    "StageName": "prod"
	}
    }

    "Outputs" : {
	"RestApiId": {
	    "Value": "!Ref RestApi",
	    "Description": "Rest API Id"
	},
	"AuthorizerId": {
	    "Value": "!Ref CognitoAuthorizer",
	    "Description": "Authorizer id"
	},
	"InvokeUrl": {
	    "Value": "!Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
	}
    }
}